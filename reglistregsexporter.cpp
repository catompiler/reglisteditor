#include "reglistregsexporter.h"
#include <algorithm>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QIODevice>
#include <QTextStream>
#include <QSet>
#include "regentry.h"
#include "regvar.h"
#include "regtypes.h"
#include "regutils.h"
#include <QDebug>


#define DEBUG_OUTPUT 0


RegListRegsExporter::RegListRegsExporter(QObject *parent)
    : RegListExporter{parent}
{
}

RegListRegsExporter::~RegListRegsExporter()
{
}

bool RegListRegsExporter::doExport(const QString& filename, const RegEntryList* regentrylist)
{
    QFileInfo regs_fi(filename);
    QDir regs_dir = regs_fi.dir();

    QString baseName = regs_fi.baseName();
    QString data_name = baseName + "_data";
    QString data_name_c = data_name + ".c";
    QString data_name_h = data_name + ".h";

    if(m_dataName.isEmpty()) m_dataName = baseName;

    QString ids_filename = regs_dir.filePath(baseName + "_ids.h");
    QString data_filename_c = regs_dir.filePath(data_name_c);
    QString data_filename_h = regs_dir.filePath(data_name_h);

    m_reg_id_names.clear();

    if(!exportRegIds(ids_filename, regentrylist)) return false;
    if(!exportRegDataDecl(data_filename_h, regentrylist)) return false;
    if(!exportRegData(data_filename_c, regentrylist)) return false;
    if(!exportRegList(filename, regentrylist)) return false;

    m_reg_id_names.clear();

    return true;
}

bool RegListRegsExporter::exportRegIds(const QString& filename, const RegEntryList* regentrylist)
{
    QFile file(filename);

    if(!file.open(QIODevice::WriteOnly)) return false;

    QFileInfo fileinfo(file);

#if defined(DEBUG_OUTPUT) && DEBUG_OUTPUT == 1
    QDebug out = qDebug();
#else
    QTextStream out(&file);
#endif

    QString reg_list_name = fileinfo.fileName().replace(QChar('.'), QChar('_'));
    QString header_guard_name = reg_list_name.toUpper();

    // header
    out << "#ifndef " << header_guard_name << "\n"
        << "#define " << header_guard_name << "\n"
        << "\n\n"
        << "// THIS FILE IS GENERATED AUTOMATICALLY!\n"
        << "// DO NOT EDIT THIS FILE!\n"
        << "\n\n";

    for(auto reit = regentrylist->cbegin(); reit != regentrylist->cend(); ++ reit){
        const RegEntry* re = *reit;

        for(auto rvit = re->cbegin(); rvit != re->cend(); ++ rvit){
            const RegVar* rv = *rvit;

            QString description = rv->description().simplified();

            for(uint i = 0; i < rv->count(); i ++){

                reg_fullindex_t id = RegUtils::makeFullIndex(re->index(), rv->subIndex() + i);
                QString regIdStr = makeRegIdName(re, rv, i);

                out << QString("#define %1 %2 /* %6 */")
                       .arg(regIdStr,
                            idToStr(id),
                            description)
                    << "\n";

                m_reg_id_names.insert(id, regIdStr);
            }
        }
    }

    // footer
    out << "\n#endif /* " << header_guard_name << " */\n";

    // Files closed in dtors, but, i want to do it manually.
    file.close();

    return true;
}

bool RegListRegsExporter::exportRegList(const QString& filename, const RegEntryList* regentrylist)
{
    QFile file(filename);

    if(!file.open(QIODevice::WriteOnly)) return false;

    QFileInfo fileinfo(file);

#if defined(DEBUG_OUTPUT) && DEBUG_OUTPUT == 1
    QDebug out = qDebug();
#else
    QTextStream out(&file);
#endif

    QString reg_list_name = fileinfo.fileName().replace(QChar('.'), QChar('_'));
    QString header_guard_name = reg_list_name.toUpper();

    // header
    out << "#ifndef " << header_guard_name << "\n"
        << "#define " << header_guard_name << "\n"
        << "\n\n"
        << "// THIS FILE IS GENERATED AUTOMATICALLY!\n"
        << "// DO NOT EDIT THIS FILE!\n"
        << "\n\n";

    out << "REGS_BEGIN(REG_ARRAY_NAME)\n\n";

    for(auto reit = regentrylist->cbegin(); reit != regentrylist->cend(); ++ reit){
        const RegEntry* re = *reit;

        for(auto rvit = re->cbegin(); rvit != re->cend(); ++ rvit){
            const RegVar* rv = *rvit;

            reg_fullindex_t base_id = RegUtils::makeFullIndex(rv->baseIndex(), rv->baseSubIndex());
            QString baseIdStr;
            auto it_base = m_reg_id_names.find(base_id);
            if(it_base != m_reg_id_names.end()){
                baseIdStr = it_base.value();
            }else{
                baseIdStr = idToStr(base_id);
            }

            QString description = rv->description().simplified();
            QString regDataType = regDataTypeStr(rv->dataType());
            QString flagsStr = flagsToStr(rv->flags());

            for(uint i = 0; i < rv->count(); i ++){

                QString regIdStr = makeRegIdName(re, rv, i);
                QString data_str = RegUtils::getVarMem(m_dataName, re, rv, i, m_entryNameMap, m_varNameMap, m_syntaxType);

                out << QString("REG(%1, %2, %3, %4, %5) /* %6 */")
                       .arg(regIdStr,
                            data_str,
                            regDataType,
                            flagsStr,
                            baseIdStr,
                            description)
                    << "\n";
            }
        }
    }

    out << "\nREGS_END()\n\n";

    // footer
    out << "\n#endif /* " << header_guard_name << " */\n";

    // Files closed in dtors, but, i want to do it manually.
    file.close();

    return true;
}

bool RegListRegsExporter::exportRegDataDecl(const QString& filename, const RegEntryList* regentrylist)
{
    QFile file(filename);

    if(!file.open(QIODevice::WriteOnly)) return false;

    QFileInfo fileinfo(file);

#if defined(DEBUG_OUTPUT) && DEBUG_OUTPUT == 1
    QDebug out = qDebug();
#else
    QTextStream out(&file);
#endif

    QString struct_name;
    QString struct_type;

    auto write_struct_begin = [this, &out, &struct_name, &struct_type](const RegEntry* re){
        struct_name = makeDataStructName(re);
        struct_type = makeDataStructTypeName(struct_name);

        out << "\nstruct " << struct_type << " {\n";
    };

    auto write_struct_end = [&out, &struct_name](){
        out << QStringLiteral("} %1;").arg(struct_name) << "\n";
    };

    QString reg_list_name = fileinfo.fileName().replace(QChar('.'), QChar('_'));
    QString header_guard_name = reg_list_name.toUpper();

    // header
    out << "#ifndef " << header_guard_name << "\n"
        << "#define " << header_guard_name << "\n"
        << "\n\n"
        << "// THIS FILE IS GENERATED AUTOMATICALLY!\n"
        << "// DO NOT EDIT THIS FILE!\n"
        << "\n\n";

    out << "struct " << makeDataStructTypeName(m_dataName) << " {\n";

    for(auto reit = regentrylist->cbegin(); reit != regentrylist->cend(); ++ reit){
        const RegEntry* re = *reit;

        bool hasEmpty = std::any_of(re->cbegin(), re->cend(), [](const RegVar* rv){
            return rv->memAddr().isEmpty();
        });

        if(!hasEmpty) continue;

        write_struct_begin(re);

        for(auto rvit = re->cbegin(); rvit != re->cend(); ++ rvit){
            const RegVar* rv = *rvit;

            if(!rv->memAddr().isEmpty()){
                continue;
            }

            QString fieldName = RegUtils::getVarDecl(re, rv, m_varNameMap, m_syntaxType);
            QString varTypeStr = RegTypes::varDataTypeStr(rv->dataType());
            QString description = rv->description().simplified();

            out << QStringLiteral("    %1 %2; /* %3 */")
                   .arg(varTypeStr,
                        fieldName,
                        description)
                << "\n";
        }

        write_struct_end();
    }

    out << "};\n";
    out << QStringLiteral("extern struct %1 %2;").arg(makeDataStructTypeName(m_dataName), m_dataName);
    out << "\n\n";

    // footer
    out << "\n#endif /* " << header_guard_name << " */\n";

    // Files closed in dtors, but, i want to do it manually.
    file.close();

    return true;
}

bool RegListRegsExporter::exportRegData(const QString& filename, const RegEntryList* regentrylist)
{
    QFile file(filename);

    if(!file.open(QIODevice::WriteOnly)) return false;

    QFileInfo fileinfo(file);

#if defined(DEBUG_OUTPUT) && DEBUG_OUTPUT == 1
    QDebug out = qDebug();
#else
    QTextStream out(&file);
#endif

    QString struct_name;

    auto write_struct_begin = [this, &out, &struct_name](const RegEntry* re = nullptr){
        struct_name = makeDataStructName(re);

        out << "." << struct_name << " = {\n";
    };

    auto write_struct_end = [&out](){
        out << "\n}";
    };

    QString header_name = fileinfo.fileName().replace(QStringLiteral(".c"), QStringLiteral(".h"));

    // header
    out << "#include \"" << header_name << "\"\n"
        << "\n\n"
        << "// THIS FILE IS GENERATED AUTOMATICALLY!\n"
        << "// DO NOT EDIT THIS FILE!\n"
        << "\n\n";

    out << "struct " << makeDataStructTypeName(m_dataName) << " " << m_dataName << " = {\n";

    bool firstEntry = true;

    for(auto reit = regentrylist->cbegin(); reit != regentrylist->cend(); ++ reit){
        const RegEntry* re = *reit;

        bool hasEmpty = std::any_of(re->cbegin(), re->cend(), [](const RegVar* rv){
            return rv->memAddr().isEmpty();
        });

        if(!hasEmpty) continue;

        if(!firstEntry){
            out << ",\n";
        }
        firstEntry = false;

        write_struct_begin(re);

        bool firstVar = true;

        for(auto rvit = re->cbegin(); rvit != re->cend(); ++ rvit){
            const RegVar* rv = *rvit;

            if(!rv->memAddr().isEmpty()){
                continue;
            }

            if(!firstVar){
                out << ",\n";
            }
            firstVar = false;

            QString fieldName = RegUtils::getVarName(re, rv, m_varNameMap, m_syntaxType);
            QString description = rv->description().simplified();
            QString defval = RegUtils::getVarDefValData(rv);

            out << QStringLiteral("    .%1 = %2 /* %3 */")
                   .arg(fieldName,
                        defval,
                        description);
        }

        write_struct_end();
    }

    out << "\n};\n";

    // footer

    // Files closed in dtors, but, i want to do it manually.
    file.close();

    return true;
}

QString RegListRegsExporter::makeRegName(const RegEntry* re, const RegVar* rv, uint index) const
{
    QString entry_name = RegUtils::getEntryName(re, m_entryNameMap, RegUtils::SyntaxType::UPPER_CASE);
    QString var_name = RegUtils::getVarName(re, rv, m_varNameMap, RegUtils::SyntaxType::UPPER_CASE);

    QString name = QStringLiteral("%1_%2").arg(entry_name, var_name);

    if(rv->count() > 1){
        name = QStringLiteral("%1_%2").arg(name).arg(index);
    }

    return name;
}

QString RegListRegsExporter::makeRegIdName(const RegEntry* re, const RegVar* rv, uint index) const
{
    return QStringLiteral("REG_ID_%1").arg(makeRegName(re, rv, index));//.toUpper());
}

QString RegListRegsExporter::makeDataStructName(const RegEntry* re) const
{
    return RegUtils::getEntryName(re, m_entryNameMap, m_syntaxType);
}

QString RegListRegsExporter::makeDataStructTypeName(const QString& name) const
{
    return RegUtils::makeStructTypeName(name);
}

QString RegListRegsExporter::regDataTypeStr(DataType type) const
{
    QString type_name = RegTypes::dataTypeStr(static_cast<DataType>(type));
    if(!type_name.isEmpty()) return QStringLiteral("REG_TYPE_") + type_name;
    return QStringLiteral("0x%1").arg(static_cast<uint>(type));
}

QString RegListRegsExporter::flagToStr(uint flag) const
{
    QString flag_name = RegTypes::flagName(static_cast<RegFlag::Value>(flag));
    if(!flag_name.isEmpty()) return QStringLiteral("REG_FLAG_") + flag_name;
    return QStringLiteral("0x%1").arg(flag);
}

QString RegListRegsExporter::flagsToStr(uint flags) const
{
    //auto flags_str_list = RegTypes::getNames(flags, std::function<QString(uint)>(std::bind(&RegListRegsExporter::flagToStr, this, std::placeholders::_1)));
    auto flags_str_list = RegTypes::getNames(flags, std::bind(&RegListRegsExporter::flagToStr, this, std::placeholders::_1));

    return flags_str_list.join(" | ");
}

QString RegListRegsExporter::idToStr(uint id) const
{
    return QStringLiteral("0x%1").arg(id, 6, 16, QChar('0'));
}
